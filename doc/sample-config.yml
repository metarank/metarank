# This is a sample config file you can use as a reference for building your own.

# A "features" section describes how to map your input events into ML features Metarank understands.
# See doc/feature_extractors.md for a general overview of possible things you can do, and doc/features
# for a detailed per-extractor configuration options.

# These features can be shared between multiple models, so if you have a model A using features 1-2-3 and
# model B using features 1-2, then all three features will be computed only once. Remember that to make
# Metarank use a feature defined in this list, you need to explicitly include it in the model configuration
# in the next session.
features:
  - name: popularity
    type: number
    scope: item
    source: item.popularity
    # TTL and refresh fields are part of every feature extractor Metarank supports.
    # The purpose of TTL is to configure data retention period, so in a case when there were no
    # feature updates for a long time, it will be eventually forgot.
    ttl: 60d
    # Refresh parameter was implemented to downsample the amount of feature updates emitted. As an example,
    # there is a window_counter feature extractor, which can be used to count number of clicks happened over
    # an item. Incrementing such a counter for a single day is extremely lightweight operation, but computing
    # window sums is not. As it's not always required to receive up-to-date counter values in ML model, we can
    # update these window sums only eventually (like once per hour): it will improve the throughput a lot
    # (but result in a slightly stale data in the inference process)
    refresh: 1h

  - name: genre
    type: string
    scope: item
    source: item.genres
    values:
      - drama
      - comedy
      - thriller

models:
  default: # name of the model, used in the inference process as a part of path, like /rank/default
    type: lambdamart # as for now, we only support lambdamart
    path: /tmp/xgboost.model # schemas like s3:// are also supported
    backend:
      type: xgboost # supported values: xgboost, lightgbm
      iterations: 100 # optional (default 100), number of interations while training the model
      seed: 0 # optional (default = random), a seed to make training deterministic
    weights: # types and weights of interactions used in the model training
      click: 1 # you can have for example, have purchases with a higher weight to hint model to optimize more for them
    features: # features from the previous section used in the model
      - popularity
      - genre

# where to take events from, and where to write intermediate data.
bootstrap:
  eventPath: file:///ranklens/events/
  workdir: file:///tmp/bootstrap

# options to use for the inference process
inference:
  port: 8080
  host: "0.0.0.0"
  # a place to store the feature values for the ML inference
  state:
    # Local memory
    # A node-local in-memory storage without any persistence. Loads latest feature values from the bootstrap process
    # automatically, so you don't need to run the Upload job with this type of storage.
    # Suitable only for local testing, as in a case of restart it will loose all the data and start from the values from
    # the bootstrap.
    type: memory
    format: json # Metarank supports json and protobuf: json is human-readable, protobuf is much more compact

    # Remote redis, with persistence. Requires the Upload job to be run to slurp all the historical feature values
    # computed during the bootstrap.
    # type: redis
    # host: localhost
    # format: json
