name: Scala CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    timeout-minutes: 20
    runs-on: ${{ matrix.platform }}
    services:
      kafka:
        image: docker.io/bitnami/kafka:3.1
        ports:
          - "9092:9092"
        env:
          KAFKA_ENABLE_KRAFT: yes
          KAFKA_CFG_PROCESS_ROLES: broker,controller
          KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
          KAFKA_BROKER_ID: 1
          KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
          KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://127.0.0.1:9092
          KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@127.0.0.1:9093
          ALLOW_PLAINTEXT_LISTENER: yes
      pulsar:
        image: apachepulsar/pulsar:2.8.0
        ports:
        - 8080:8080
        - 6650:6650
        env:
          PULSAR_MEM: " -Xms512m -Xmx512m -XX:MaxDirectMemorySize=1g"
        options: bin/pulsar standalone --wipe-data
    strategy:
      matrix:
        platform: [ubuntu-20.04, macos-11]

    steps:
    - name: install libomp
      run: brew install libomp
      if: runner.os == 'macOS'

    - name: install haveged
      run: sudo apt-get install haveged && sudo haveged && cat /proc/cpuinfo && ls -l /dev/
      if: runner.os == 'Linux'

    - uses: actions/checkout@v2
      with:
        lfs: 'true'
    - uses: actions/cache@v2
      with:
        path: ~/.sbt ~/.m2 ~/.ivy2 ~/.cache
        key: ${{ runner.os }}-build-${{ hashFiles('build.sbt', 'api/build.sbt', 'ingest/build.sbt', 'core/build.sbt', 'project/Deps.scala') }}
    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        distribution: 'adopt-hotspot'
        java-version: '11'

    - name: Run formatting tests
      run: sbt scalafmtCheck

    - name: Run tests
      run: sbt -mem 3000 test assembly

    - name: Start Redis
      uses: shogo82148/actions-setup-redis@v1
      with:
        redis-version: 6

    - name: Run e2e test
      run: ./run_e2e.sh target/scala-2.12/metarank.jar

    - name: Run docker 
      run: sbt docker:publishLocal && docker run metarank/metarank:latest
      if: runner.os == 'Linux'